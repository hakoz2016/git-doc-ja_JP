# Translation of GIT Documentation to Japanese.
# Copyright (C) 2005 Johannes Schindelin and the git-list <git@vger.kernel.org>.
# This file is distributed under the same license as the git package.
# Yasuaki Narita <yasuaki_n@mti.biglobe.ne.jp>, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: git\n"
"POT-Creation-Date: 2009-09-27 03:54+0900\n"
"PO-Revision-Date: 2009-09-27 03:54+0900\n"
"Last-Translator: TATEISHI Katsuyuki <kt@wheel.jp>\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_alternate_object_database]]alternate object database::\n"
"\tVia the alternates mechanism, a <<def_repository,repository>>\n"
"\tcan inherit part of its <<def_object_database,object database>>\n"
"\tfrom another object database, which is called \"alternate\".\n"
msgstr ""
"[[def_alternate_object_database]]代替オブジェクトＤＢ(alternate object database)::\n"
"\t代替メカニズム(alternates mechanism)により、<<def_repository,リポジトリ>> は\n"
"\tそのオブジェクトＤＢの一部を、他のオブジェクトＤＢから継承\n"
"\tすることができます。この継承したものを \"代替\" オブジェクトＤＢといいます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_bare_repository]]bare repository::\n"
"\tA bare repository is normally an appropriately\n"
"\tnamed <<def_directory,directory>> with a `.git` suffix that does not\n"
"\thave a locally checked-out copy of any of the files under\n"
"\trevision control. That is, all of the `git`\n"
"\tadministrative and control files that would normally be present in the\n"
"\thidden `.git` sub-directory are directly present in the\n"
"\t`repository.git` directory instead,\n"
"\tand no other files are present and checked out. Usually publishers of\n"
"\tpublic repositories make bare repositories available.\n"
msgstr ""
"[[def_bare_repository]]裸のリポジトリ(bare repository)::\n"
"\t裸のリポジトリとは、通常 `.git` の拡張子を持つ <<def_directory,ディレクトリ>> で、\n"
"\tリビジョン管理下にあるチェックアウトしたファイルをローカルに持たないディレクトリです。\n"
"\t通常 `.git` サブディレクトリ に隠れている `git` の管理ファイル全てが\n"
"\t`repository.git` ディレクトリに直接存在し、\n"
"\t他のファイルは存在せず、チェックアウトもされていません。\n"
"\t通常、公開リポジトリを出版する人は、裸のリポジトリを作成します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_blob_object]]blob object::\n"
"\tUntyped <<def_object,object>>, e.g. the contents of a file.\n"
msgstr ""
"[[def_blob_object]]blob object::\n"
"\tタイプ付けされていない<<def_object,オブジェクト>>, つまりファイルの中身です。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_branch]]branch::\n"
"\tA \"branch\" is an active line of development.  The most recent\n"
"\t<<def_commit,commit>> on a branch is referred to as the tip of\n"
"\tthat branch.  The tip of the branch is referenced by a branch\n"
"\t<<def_head,head>>, which moves forward as additional development\n"
"\tis done on the branch.  A single git\n"
"\t<<def_repository,repository>> can track an arbitrary number of\n"
"\tbranches, but your <<def_working_tree,working tree>> is\n"
"\tassociated with just one of them (the \"current\" or \"checked out\"\n"
"\tbranch), and <<def_HEAD,HEAD>> points to that branch.\n"
msgstr ""
"[[def_branch]]ブランチ(branch)::\n"
"\t\"ブランチ\" はアクティブな開発ラインのことです。ブランチ上の最新の<<def_commit,コミット>>は\n"
"\tそのブランチの先端(tip)として参照されます。\n"
"\tブランチの先端はブランチの<<def_head,ヘッド(head)>>により参照され、\n"
"\tブランチ上でさらに開発が進むと、先に進められます。\n"
"\t１つの git <<def_repository,リポジトリ>>は任意の数のブランチを追跡できますが、\n"
"\t<<def_working_tree,作業ツリー>> はそれらブランチの１つ(\"カレント(current)\"\n"
"\tまたは\"チェックアウト\"ブランチ)と関連づけられ、<<def_HEAD,HEAD>>がその\n"
"\tブランチを指し示しています。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_cache]]cache::\n"
"\tObsolete for: <<def_index,index>>.\n"
msgstr ""
"[[def_cache]]キャッシュ(cache)::\n"
"\t<<def_index,索引(index)>> に対する廃語です。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_chain]]chain::\n"
"\tA list of objects, where each <<def_object,object>> in the list contains\n"
"\ta reference to its successor (for example, the successor of a\n"
"\t<<def_commit,commit>> could be one of its <<def_parent,parents>>).\n"
msgstr ""
"[[def_chain]]チェーン(chain)::\n"
"\tオブジェクトのリストのことで、そのリスト内の各<<def_object,オブジェクト>>が\n"
"\t後続する参照を含んでいるものを指します。(後続する参照とは、例えば\n"
"\t<<def_commit,コミット>>の場合、その<<def_parent,親(parents)>>のことです)\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_changeset]]changeset::\n"
"\tBitKeeper/cvsps speak for \"<<def_commit,commit>>\". Since git does not\n"
"\tstore changes, but states, it really does not make sense to use the term\n"
"\t\"changesets\" with git.\n"
msgstr ""
"[[def_changeset]]チェンジセット(changeset)::\n"
"\t\"<<def_commit,コミット>>\" に対する BitKeeper/cvsps 側の用語です。\n"
"\tgit は変更ではなく状態を格納する為、git で \"チェンジセット\" という用語を\n"
"\t使用するのは実際のところ意味がありません。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_checkout]]checkout::\n"
"\tThe action of updating all or part of the\n"
"\t<<def_working_tree,working tree>> with a <<def_tree_object,tree object>>\n"
"\tor <<def_blob_object,blob>> from the\n"
"\t<<def_object_database,object database>>, and updating the\n"
"\t<<def_index,index>> and <<def_HEAD,HEAD>> if the whole working tree has\n"
"\tbeen pointed at a new <<def_branch,branch>>.\n"
msgstr ""
"[[def_checkout]]チェックアウト(checkout)::\n"
"\t<<def_working_tree,作業ツリー>>の全てもしくは一部を\n"
"\t<<def_object_database,オブジェクトDB>> にある\n"
"\t<<def_tree_object,ツリーオブジェクト>>\n"
"\tもしくは<<def_blob_object,ブロブ(blob)>>の内容で\n"
"\t更新する操作のことです。\n"
"\tもしも作業ツリー全体が新しい <<def_branch,ブランチ>> を\n"
"\t指しているならば\n"
"\t<<def_index,インデックス>> と <<def_HEAD,HEAD>> も更新します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_cherry-picking]]cherry-picking::\n"
"\tIn <<def_SCM,SCM>> jargon, \"cherry pick\" means to choose a subset of\n"
"\tchanges out of a series of changes (typically commits) and record them\n"
"\tas a new series of changes on top of a different codebase. In GIT, this is\n"
"\tperformed by the \"git cherry-pick\" command to extract the change introduced\n"
"\tby an existing <<def_commit,commit>> and to record it based on the tip\n"
"\tof the current <<def_branch,branch>> as a new commit.\n"
msgstr ""
"[[def_cherry-picking]]チェリーピック(cherry-picking)::\n"
"\t<<def_SCM,SCM>>の用語では、\"チェリーピック(cherry pick)\" は\n"
"\t一連の変更(一般にはコミット)の一部を選択し、異なるコードベースの先頭に\n"
"\t新しい一連の変更としてそれらを記録することです。GITでは\n"
"\t\"git cherry-pick\" コマンドによって<<def_commit,コミット>>による変更を抜き出し、\n"
"\t現在の<<def_branch,ブランチ>>の先端に新しいコミットとして記録する操作のことです。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_clean]]clean::\n"
"\tA <<def_working_tree,working tree>> is clean, if it\n"
"\tcorresponds to the <<def_revision,revision>> referenced by the current\n"
"\t<<def_head,head>>. Also see \"<<def_dirty,dirty>>\".\n"
msgstr ""
"[[def_clean]]クリーン(clean)::\n"
"\t<<def_working_tree,作業ツリー>> がクリーンであるとは、\n"
"\tその作業ディレクトリが現在の<<def_head,ヘッド(head)>>が参照する\n"
"\t<<def_revision,リビジョン>>と一致している場合を言います。\n"
"\t\"<<def_dirty,dirty>>\" も参照してください。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_commit]]commit::\n"
"\tAs a noun: A single point in the\n"
"\tgit history; the entire history of a project is represented as a\n"
"\tset of interrelated commits.  The word \"commit\" is often\n"
"\tused by git in the same places other revision control systems\n"
"\tuse the words \"revision\" or \"version\".  Also used as a short\n"
"\thand for <<def_commit_object,commit object>>.\n"
msgstr ""
"[[def_commit]]コミット(commit)::\n"
"\t名詞：git の履歴内のある１点です。プロジェクトの全履歴は\n"
"\t相互に関連したコミットの集合により表現されています。git では\"コミット\"という言葉を\n"
"\t他のリビジョン管理システムが使用する \"リビジョン\" または \"バージョン\"と同じ意味で\n"
"\t使用することがあります。また、<<def_commit_object,コミットオブジェクト>>\n"
"\tの略称として使われることもあります。\n"

#. type: Plain text
#, no-wrap
msgid ""
"As a verb: The action of storing a new snapshot of the project's\n"
"state in the git history, by creating a new commit representing the current\n"
"state of the <<def_index,index>> and advancing <<def_HEAD,HEAD>>\n"
"to point at the new commit.\n"
msgstr ""
"動詞：プロジェクト状態の新しいスナップショットを git の履歴に格納する操作のことで、\n"
"<<def_index,索引(index)>>の現在の状態を現わす新しいコミットを作成し、\n"
"新しいコミットを指し示すように <<def_HEAD,HEAD>> の位置を進めます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_commit_object]]commit object::\n"
"\tAn <<def_object,object>> which contains the information about a\n"
"\tparticular <<def_revision,revision>>, such as <<def_parent,parents>>, committer,\n"
"\tauthor, date and the <<def_tree_object,tree object>> which corresponds\n"
"\tto the top <<def_directory,directory>> of the stored\n"
"\trevision.\n"
msgstr ""
"[[def_commit_object]]コミットオブジェクト(commit object)::\n"
"\t特定<<def_revision,リビジョン>>の情報を含んだ<<def_object,オブジェクト>>のことです。\n"
"\tコミットオブジェクトは<<def_parent,親(parents)>>、コミットした人、著者、日付、\n"
"\t格納されているリビジョンの最上位のディレクトリと一致する\n"
"\t<<def_tree_object,ツリーオブジェクト(tree object)>>、などの情報が含まれています。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_core_git]]core git::\n"
"\tFundamental data structures and utilities of git. Exposes only limited\n"
"\tsource code management tools.\n"
msgstr ""
"[[def_core_git]]gitの中核(core git)::\n"
"\tgitの基礎データ構造とユーティリティのこと。\n"
"\tソースコード管理ツールとしての中核部分のことです。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_DAG]]DAG::\n"
"\tDirected acyclic graph. The <<def_commit_object,commit objects>> form a\n"
"\tdirected acyclic graph, because they have parents (directed), and the\n"
"\tgraph of commit objects is acyclic (there is no <<def_chain,chain>>\n"
"\twhich begins and ends with the same <<def_object,object>>).\n"
msgstr ""
"[[def_DAG]]DAG::\n"
"\t有向非巡回グラフ。<<def_commit_object,コミットオブジェクト>> は有向非巡回グラフ\n"
"\tを形成します。何故ならコミットは(方向付けされた)親を持ち、\n"
"\tコミットオブジェクトのグラフは非巡回(つまり、始まりと終わりが\n"
"\t同じ<<def_object,オブジェクト>>となるような <<def_chain,チェーン(chain)>>\n"
"\tが存在しないからです)\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_dangling_object]]dangling object::\n"
"\tAn <<def_unreachable_object,unreachable object>> which is not\n"
"\t<<def_reachable,reachable>> even from other unreachable objects; a\n"
"\tdangling object has no references to it from any\n"
"\treference or <<def_object,object>> in the <<def_repository,repository>>.\n"
msgstr ""
"[[def_dangling_object]]遊離オブジェクト(dangling object)::\n"
"\t<<def_unreachable_object,到達不能なオブジェクト>>の内、他のどの到達不能オブジェクトからも\n"
"\t到達不能なオブジェクトのことです。つまり、リボジトリ内のどの参照と\n"
"\tどのオブジェクトからも参照されていないオブジェクトのことです。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_detached_HEAD]]detached HEAD::\n"
"\tNormally the <<def_HEAD,HEAD>> stores the name of a\n"
"\t<<def_branch,branch>>.  However, git also allows you to <<def_checkout,check out>>\n"
"\tan arbitrary <<def_commit,commit>> that isn't necessarily the tip of any\n"
"\tparticular branch.  In this case HEAD is said to be \"detached\".\n"
msgstr ""
"[[def_detached_HEAD]]分離したHEAD (detached HEAD)::\n"
"\t通常 <<def_HEAD,HEAD>> はブランチ名を保管します。しかし、gitは特定のブランチの\n"
"\t先端(tip)ではない任意のコミットをチェックアウトすることもできます。\n"
"\tその状態のことを分離した(detached)といいます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_dircache]]dircache::\n"
"\tYou are *waaaaay* behind. See <<def_index,index>>.\n"
msgstr ""
"[[def_dircache]]ディレクトリキャッシュ(dircache)::\n"
"\t*かなり時代遅れ* な用語です。<<def_index,索引(index)>> を参照。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_directory]]directory::\n"
"\tThe list you get with \"ls\" :-)\n"
msgstr ""
"[[def_directory]]ディレクトリ(directory)::\n"
"\t\"ls\" によって得られるリストのことです :-)\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_dirty]]dirty::\n"
"\tA <<def_working_tree,working tree>> is said to be \"dirty\" if\n"
"\tit contains modifications which have not been <<def_commit,committed>> to the current\n"
"\t<<def_branch,branch>>.\n"
msgstr ""
"[[def_dirty]]汚れている(dirty)::\n"
"\t<<def_working_tree,作業ツリー>> が \"汚れている(dirty)\" とは、\n"
"\t現在の<<def_branch,ブランチ>>に<<def_commit,コミット>>されていない\n"
"\t変更が作業ツリー内に含まれていることをいいます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_ent]]ent::\n"
"\tFavorite synonym to \"<<def_tree-ish,tree-ish>>\" by some total geeks. See\n"
"\t`http://en.wikipedia.org/wiki/Ent_(Middle-earth)` for an in-depth\n"
"\texplanation. Avoid this term, not to confuse people.\n"
msgstr ""
"[[def_ent]]エント(ent)::\n"
"\tギークが好んで使う \"<<def_tree-ish,tree-ish>>\" の同義語です。\n"
"\t詳しい説明は `http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%B3%E3%83%88` を参照してください。\n"
"\t人々を混乱させない為にも、この言葉の使用はさけてください。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_evil_merge]]evil merge::\n"
"\tAn evil merge is a <<def_merge,merge>> that introduces changes that\n"
"\tdo not appear in any <<def_parent,parent>>.\n"
msgstr ""
"[[def_evil_merge]]有害なマージ(evil merge)::\n"
"\t有害なマージ(evil merge)とは、どの<<def_parent,親>>にも現れない\n"
"\t変更が行われている<<def_merge,マージ>>のことです。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_fast_forward]]fast forward::\n"
"\tA fast-forward is a special type of <<def_merge,merge>> where you have a\n"
"\t<<def_revision,revision>> and you are \"merging\" another\n"
"\t<<def_branch,branch>>'s changes that happen to be a descendant of what\n"
"\tyou have. In such these cases, you do not make a new <<def_merge,merge>>\n"
"\t<<def_commit,commit>> but instead just update to his\n"
"\trevision. This will happen frequently on a\n"
"\t<<def_tracking_branch,tracking branch>> of a remote\n"
"\t<<def_repository,repository>>.\n"
msgstr ""
"[[def_fast_forward]]早送り(fast forward)::\n"
"\t早送り(fast forward) とは特殊なタイプの<<def_merge,マージ>>のことで、\n"
"\tマージにより得られる結果が作成済みの子孫と一致するマージのことをいいます。\n"
"\tこのような場合、新しい<<def_merge,マージ>><<def_commit,コミット>>は作成されずに、\n"
"\tそのリビジョンを指すように更新されます。\n"
"\t早送り(fast "
"forward)はリモート<<def_repository,リポジトリ>>の<<def_tracking_branch,追跡ブランチ>>\n"
"\tの場合に良く発生します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_fetch]]fetch::\n"
"\tFetching a <<def_branch,branch>> means to get the\n"
"\tbranch's <<def_head_ref,head ref>> from a remote\n"
"\t<<def_repository,repository>>, to find out which objects are\n"
"\tmissing from the local <<def_object_database,object database>>,\n"
"\tand to get them, too.  See also linkgit:git-fetch[1].\n"
msgstr ""
"[[def_fetch]]フェッチ(fetch)::\n"
"\t<<def_branch,ブランチ(branch)>>を取得するとは、ブランチの\n"
"\tリモート<<def_repository,リポジトリ>>から<<def_head_ref,ヘッドの参照(head ref)>>\n"
"\tを取得し、ローカルの<<def_object_database,オブジェクトＤＢ>>に存在しないオブジェクトを\n"
"\t探し出し、それらを取得することをいいます。linkgit:git-fetch[1] も参照してください。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_file_system]]file system::\n"
"\tLinus Torvalds originally designed git to be a user space file system,\n"
"\ti.e. the infrastructure to hold files and directories. That ensured the\n"
"\tefficiency and speed of git.\n"
msgstr ""
"[[def_file_system]]ファイルシステム(file system)::\n"
"\tLinus Torvalds は元々はユーザ空間のファイルシステム、つまり、ファイルと\n"
"\tディレクトリを保持する構造基盤として git を設計していました。\n"
"\tその性質により、gitの効率性とスピードが保障されています。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_git_archive]]git archive::\n"
"\tSynonym for <<def_repository,repository>> (for arch people).\n"
msgstr ""
"[[def_git_archive]]gitアーカイブ(git archive)::\n"
"\t<<def_repository,リポジトリ>> の同義語です。(archユーザが使用します)\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_grafts]]grafts::\n"
"\tGrafts enables two otherwise different lines of development to be joined\n"
"\ttogether by recording fake ancestry information for commits. This way\n"
"\tyou can make git pretend the set of <<def_parent,parents>> a <<def_commit,commit>> has\n"
"\tis different from what was recorded when the commit was\n"
"\tcreated. Configured via the `.git/info/grafts` file.\n"
msgstr ""
"[[def_grafts]]接ぎ木(grafts)::\n"
"\t接ぎ木(grafts)とは、コミットに関する嘘の祖先情報を記録することで関連のない２つの開発ラインを\n"
"\tつなぎ合わせることをいいます。この方法により、コミット作成時の記録とは違うコミットの\n"
"\t<<def_parent,親>>の集合を、コミットの<<def_parent,親>>の集合であるかのように git に\n"
"\t行動させることができます。\n"
"\tこの情報は `.git/info/grafts` ファイルにより設定します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_hash]]hash::\n"
"\tIn git's context, synonym to <<def_object_name,object name>>.\n"
msgstr ""
"[[def_hash]]ハッシュ(hash)::\n"
"\tgit の文脈中では、<<def_object_name,オブジェクト名>>と同義です。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_head]]head::\n"
"\tA <<def_ref,named reference>> to the <<def_commit,commit>> at the tip of a\n"
"\t<<def_branch,branch>>.  Heads are stored in\n"
"\t`$GIT_DIR/refs/heads/`, except when using packed refs. (See\n"
"\tlinkgit:git-pack-refs[1].)\n"
msgstr ""
"[[def_head]]ヘッド(head)::\n"
"\t<<def_branch,ブランチ>>の先端にある<<def_commit,コミット>>への<<def_ref,名前のついた参照>>\n"
"\tのことです。ヘッドは通常 `$GIT_DIR/refs/heads/` の下に保管されますが、\n"
"\t例外として参照が圧縮(pack)されることもあります。(linkgit:git-pack-refs[1] 参照)\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_HEAD]]HEAD::\n"
"\tThe current <<def_branch,branch>>.  In more detail: Your <<def_working_tree,\n"
"\tworking tree>> is normally derived from the state of the tree\n"
"\treferred to by HEAD.  HEAD is a reference to one of the\n"
"\t<<def_head,heads>> in your repository, except when using a\n"
"\t<<def_detached_HEAD,detached HEAD>>, in which case it may\n"
"\treference an arbitrary commit.\n"
msgstr ""
"[[def_HEAD]]HEAD::\n"
"\t現在の <<def_branch,ブランチ>> です。より詳しくは、\n"
"\t<<def_working_tree,作業ツリー>>は通常、HEAD が参照する状態から導き出されます。\n"
"\tHEAD は通常、リポジトリ内の１つの <<def_head,ヘッド(head)>> を参照します。\n"
"\t例外として、<<def_detached_HEAD,分離したHEAD(detached HEAD)>>を使用している場合があり、\n"
"\tその場合は、任意のコミットを参照します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_head_ref]]head ref::\n"
"\tA synonym for <<def_head,head>>.\n"
msgstr ""
"[[def_head_ref]]head ref::\n"
"\t<<def_head,ヘッド(head)>>と同義です。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_hook]]hook::\n"
"\tDuring the normal execution of several git commands, call-outs are made\n"
"\tto optional scripts that allow a developer to add functionality or\n"
"\tchecking. Typically, the hooks allow for a command to be pre-verified\n"
"\tand potentially aborted, and allow for a post-notification after the\n"
"\toperation is done. The hook scripts are found in the\n"
"\t`$GIT_DIR/hooks/` directory, and are enabled by simply\n"
"\tremoving the `.sample` suffix from the filename. In earlier versions\n"
"\tof git you had to make them executable.\n"
msgstr ""
"[[def_hook]]フック(hook)::\n"
"\tgit コマンドのいくつかは実行中にオプションでスクリプトを呼び出すことができ、\n"
"\t開発者の機能追加やチェックの手助けをします。\n"
"\t通常、フックは事前検証を行い処理を中止する為や操作が完了した後に知らせる為に\n"
"\t用いられます。フックスクリプトは `$GIT_DIR/hooks/` ディレクトリに保管されおり、\n"
"\tファイル名から`.sample`を削除するだけで利用可能になります。\n"
"\t古いバージョンのgitではスクリプトを実行パーミッションを付与することで\n"
"\t利用可能になります。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_index]]index::\n"
"\tA collection of files with stat information, whose contents are stored\n"
"\tas objects. The index is a stored version of your\n"
"\t<<def_working_tree,working tree>>. Truth be told, it can also contain a second, and even\n"
"\ta third version of a working tree, which are used\n"
"\twhen <<def_merge,merging>>.\n"
msgstr ""
"[[def_index]]索引(index)::\n"
"\t索引はファイルとその状態の集合であり、その中身はオブジェクトとして格納されています。\n"
"\t<<def_working_tree,作業ツリー>>の内容を保管しているバージョンです。\n"
"\t実は、索引は２つないし２つの作業ツリーのバージョンを含むことも可能で、\n"
"\t<<def_merge,マージ>>するときにそのような状態となります。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_index_entry]]index entry::\n"
"\tThe information regarding a particular file, stored in the\n"
"\t<<def_index,index>>. An index entry can be unmerged, if a\n"
"\t<<def_merge,merge>> was started, but not yet finished (i.e. if\n"
"\tthe index contains multiple versions of that file).\n"
msgstr ""
"[[def_index_entry]]索引エントリ(index entry)::\n"
"\t<<def_index,索引(index)>>内に格納された特定のファイル情報のことです。\n"
"\t索引エントリは<<def_merge,マージ>>が開始されているが\n"
"\t完了していない場合(すなわち、索引がファイルの複数の\n"
"\tバージョンを含んでいる場合)には、マージが取り消されていることもあります。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_master]]master::\n"
"\tThe default development <<def_branch,branch>>. Whenever you\n"
"\tcreate a git <<def_repository,repository>>, a branch named\n"
"\t\"master\" is created, and becomes the active branch. In most\n"
"\tcases, this contains the local development, though that is\n"
"\tpurely by convention and is not required.\n"
msgstr ""
"[[def_master]]master::\n"
"\tデフォルトの開発<<def_branch,ブランチ>>のことです。\n"
"\tgit <<def_repository,リポジトリ>> を作成するといつでも\n"
"\t\"master\" という名前のブランチが作成され、アクティブなブランチと\n"
"\tなります。たいてい master ブランチにはローカルの開発を含みますが、\n"
"\tこれは純粋に慣例によって行われていることであり必須ではありません。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_merge]]merge::\n"
"\tAs a verb: To bring the contents of another\n"
"\t<<def_branch,branch>> (possibly from an external\n"
"\t<<def_repository,repository>>) into the current branch.  In the\n"
"\tcase where the merged-in branch is from a different repository,\n"
"\tthis is done by first <<def_fetch,fetching>> the remote branch\n"
"\tand then merging the result into the current branch.  This\n"
"\tcombination of fetch and merge operations is called a\n"
"\t<<def_pull,pull>>.  Merging is performed by an automatic process\n"
"\tthat identifies changes made since the branches diverged, and\n"
"\tthen applies all those changes together.  In cases where changes\n"
"\tconflict, manual intervention may be required to complete the\n"
"\tmerge.\n"
msgstr ""
"[[def_merge]]マージ(merge)::\n"
"\t動詞：他の<<def_branch,ブランチ>>(外部<<def_repository,リポジトリ>>のブランチも可)\n"
"\tの内容を現在のブランチに届けることをいいます。\n"
"\t外部リポジトリからマージをする場合は、はじめにリモートブランチから\n"
"\t変更を<<def_fetch,取得(fetch)>>され、その結果が現在のブランチにマージされます。\n"
"\tこの取得とマージ操作の組み合わせは<<def_pull,pull>>と呼ばれています。\n"
"\tマージはそのブランチが分岐してから行われた変更を特定し、以降の変更をすべて\n"
"\t適用する作業を全自動で行います。コンフリクトが発生した場合は、\n"
"\tマージを完了する為に手作業の対処が必要になります。\n"

#. type: Plain text
#, no-wrap
msgid ""
"As a noun: unless it is a <<def_fast_forward,fast forward>>, a\n"
"successful merge results in the creation of a new <<def_commit,commit>>\n"
"representing the result of the merge, and having as\n"
"<<def_parent,parents>> the tips of the merged <<def_branch,branches>>.\n"
"This commit is referred to as a \"merge commit\", or sometimes just a\n"
"\"merge\".\n"
msgstr ""
"名詞：マージが<<def_fast_forward,早送り(fast forward)>>にならない場合、\n"
"マージは新しい<<def_commit,コミット>>を作成し、\n"
"そのコミットはマージした結果を表現し、その<<def_parent,親(parents)>>は\n"
"マージされた<<def_branch,ブランチ>>の先端となります。\n"
"このコミットは \"merge commit\" と呼ばれ、単に \"merge\" と呼ばれることもあります。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_object]]object::\n"
"\tThe unit of storage in git. It is uniquely identified by the\n"
"\t<<def_SHA1,SHA1>> of its contents. Consequently, an\n"
"\tobject can not be changed.\n"
msgstr ""
"[[def_object]]オブジェクト(object)::\n"
"\tgit のストレージ構成単位です。オブジェクトはその中身の <<def_SHA1,SHA1>> により\n"
"\t一意に特定されます。その結果、オブジェクトは不変となります。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_object_database]]object database::\n"
"\tStores a set of \"objects\", and an individual <<def_object,object>> is\n"
"\tidentified by its <<def_object_name,object name>>. The objects usually\n"
"\tlive in `$GIT_DIR/objects/`.\n"
msgstr ""
"[[def_object_database]]オブジェクトＤＢ(object database)::\n"
"\t\"object\" の集合を保管します。個々の<<def_object,オブジェクト(object)>>は\n"
"\t自身の<<def_object_name,オブジェクト名>>によって特定されます。\n"
"\tオブジェクトは通常 `$GIT_DIR/objects/` に存在します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_object_identifier]]object identifier::\n"
"\tSynonym for <<def_object_name,object name>>.\n"
msgstr ""
"[[def_object_identifier]]オブジェクトの識別子(object identifier)::\n"
"\t<<def_object_name,オブジェクト名>>と同義。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_object_name]]object name::\n"
"\tThe unique identifier of an <<def_object,object>>. The <<def_hash,hash>>\n"
"\tof the object's contents using the Secure Hash Algorithm\n"
"\t1 and usually represented by the 40 character hexadecimal encoding of\n"
"\tthe <<def_hash,hash>> of the object.\n"
msgstr ""
"[[def_object_name]]オブジェクト名(object name)::\n"
"\t<<def_object,オブジェクト>>のユニークな識別子です。\n"
"\tSecure Hash Algorithm 1 を使用して得られるオブジェクトの<<def_hash,ハッシュ(hash)>>\n"
"\tであり、通常は40桁の16進数で表されます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_object_type]]object type::\n"
"\tOne of the identifiers \"<<def_commit_object,commit>>\",\n"
"\t\"<<def_tree_object,tree>>\", \"<<def_tag_object,tag>>\" or\n"
"\t\"<<def_blob_object,blob>>\" describing the type of an\n"
"\t<<def_object,object>>.\n"
msgstr ""
"[[def_object_type]]オブジェクトタイプ(object type)::\n"
"\t識別子 \"<<def_commit_object,コミット>>\", \"<<def_tree_object,ツリー>>\", "
"\"<<def_tag_object,タグ>>\"\n"
"\tまたは \"<<def_blob_object,ブロブ(blob)>>\" の１つであり、\n"
"\t<<def_object,オブジェクト(object)>>のタイプを記述します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_octopus]]octopus::\n"
"\tTo <<def_merge,merge>> more than two <<def_branch,branches>>. Also denotes an\n"
"\tintelligent predator.\n"
msgstr ""
"[[def_octopus]]タコ(octopus)::\n"
"\t２つ以上の<<def_branch,ブランチ>>を<<def_merge,マージ>>すること。\n"
"\tまたは、知的な捕食動物を意味します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_origin]]origin::\n"
"\tThe default upstream <<def_repository,repository>>. Most projects have\n"
"\tat least one upstream project which they track. By default\n"
"\t'origin' is used for that purpose. New upstream updates\n"
"\twill be fetched into remote <<def_tracking_branch,tracking branches>> named\n"
"\torigin/name-of-upstream-branch, which you can see using\n"
"\t`git branch -r`.\n"
msgstr ""
"[[def_origin]]origin::\n"
"\tデフォルトの上流<<def_repository,リポジトリ>>のことを指します。\n"
"\tたいていのプロジェクトは少なくとも１つの追跡している上流プロジェクトがあります。\n"
"\tデフォルトで 'origin' はその上流プロジェクトの追跡に使用されます。\n"
"\t上流の更新をすると、origin/name-of-upstream-branch の名前のリモートの\n"
"\t<<def_tracking_branch,追跡ブランチ>>に取得されます。\n"
"\tリモート追跡ブランチは `git branch -r` にて参照できます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_pack]]pack::\n"
"\tA set of objects which have been compressed into one file (to save space\n"
"\tor to transmit them efficiently).\n"
msgstr ""
"[[def_pack]]パック(pack)::\n"
"\tオブジェクトの集合で、(ディスクスペースの節約とオブジェクトを効果的に伝達させる為に)\n"
"\t１つのファイルに圧縮されたものをいいます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_pack_index]]pack index::\n"
"\tThe list of identifiers, and other information, of the objects in a\n"
"\t<<def_pack,pack>>, to assist in efficiently accessing the contents of a\n"
"\tpack.\n"
msgstr ""
"[[def_pack_index]]パック索引(pack index)::\n"
"\t<<def_pack,パック>>内のオブジェクトの識別子とその他情報の一覧のことで、\n"
"\t効果的にパックの中身にアクセスする為の手助けをします。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_parent]]parent::\n"
"\tA <<def_commit_object,commit object>> contains a (possibly empty) list\n"
"\tof the logical predecessor(s) in the line of development, i.e. its\n"
"\tparents.\n"
msgstr ""
"[[def_parent]]親(parent)::\n"
"\t<<def_commit_object,コミットオブジェクト>>内に含まれる開発ライン内の論理的な祖先\n"
"\tのことです(親が空の場合もあります)。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_pickaxe]]pickaxe::\n"
"\tThe term <<def_pickaxe,pickaxe>> refers to an option to the diffcore\n"
"\troutines that help select changes that add or delete a given text\n"
"\tstring. With the `--pickaxe-all` option, it can be used to view the full\n"
"\t<<def_changeset,changeset>> that introduced or removed, say, a\n"
"\tparticular line of text. See linkgit:git-diff[1].\n"
msgstr ""
"[[def_pickaxe]]つるはし(pickaxe)::\n"
"\t<<def_pickaxe,つるはし(pickaxe)>>という用語は指定したテキスト文字列を追加または削除\n"
"\tした変更を選択する手助けをする diffcore の動作オプションです。\n"
"\t`--pickaxe-all` オプションは指定したテキストラインを追加または削除した\n"
"\t<<def_changeset,チェンジセット>>を全て表示する為に用います。\n"
"\tlinkgit:git-diff[1] 参照。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_plumbing]]plumbing::\n"
"\tCute name for <<def_core_git,core git>>.\n"
msgstr ""
"[[def_plumbing]]配管(plumbing)::\n"
"\t<<def_core_git,gitの中核(core git)>> に対する可愛い呼び名です。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_porcelain]]porcelain::\n"
"\tCute name for programs and program suites depending on\n"
"\t<<def_core_git,core git>>, presenting a high level access to\n"
"\tcore git. Porcelains expose more of a <<def_SCM,SCM>>\n"
"\tinterface than the <<def_plumbing,plumbing>>.\n"
msgstr ""
"[[def_porcelain]]磁器(porcelain)::\n"
"\t<<def_core_git,gitの中核(core git)>>に依存するプログラムと\n"
"\tプログラムの一式に対する可愛い呼び名です。\n"
"\tgitの中核に対する高レベルなアクセスを提供します。\n"
"\t磁器(porcelain)は<<def_plumbing,配管(plumbing)>>よりも\n"
"\t<<def_SCM,SCM>>らしいインターフェースを提供します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_pull]]pull::\n"
"\tPulling a <<def_branch,branch>> means to <<def_fetch,fetch>> it and\n"
"\t<<def_merge,merge>> it.  See also linkgit:git-pull[1].\n"
msgstr ""
"[[def_pull]]pull::\n"
"\t<<def_branch,ブランチ>>を pull するとは、ブランチを<<def_fetch,取得>>し、\n"
"\t<<def_merge,マージ>>することをいいます。linkgit:git-pull[1] 参照。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_push]]push::\n"
"\tPushing a <<def_branch,branch>> means to get the branch's\n"
"\t<<def_head_ref,head ref>> from a remote <<def_repository,repository>>,\n"
"\tfind out if it is a direct ancestor to the branch's local\n"
"\thead ref, and in that case, putting all\n"
"\tobjects, which are <<def_reachable,reachable>> from the local\n"
"\thead ref, and which are missing from the remote\n"
"\trepository, into the remote\n"
"\t<<def_object_database,object database>>, and updating the remote\n"
"\thead ref. If the remote <<def_head,head>> is not an\n"
"\tancestor to the local head, the push fails.\n"
msgstr ""
"[[def_push]]プッシュ(push)::\n"
"\t<<def_branch,ブランチ>>を push するとは、リモート<<def_repository,リポジトリ>>\n"
"\tからブランチの<<def_head_ref,ヘッド参照>>を取得し、\n"
"\tローカル側のヘッド参照の直接の祖先であるかを確認し、\n"
"\t祖先である場合はローカルのヘッド参照から<<def_reachable,到達可能>>で\n"
"\tリモートリポジトリに存在しない全てのオブジェクトをリモートの\n"
"\t<<def_object_database,オブジェクトＤＢ>>に設置し、\n"
"\tリモートのヘッド参照を更新します。\n"
"\tリモートのヘッドがローカルヘッドの祖先でない場合は、push は失敗します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_reachable]]reachable::\n"
"\tAll of the ancestors of a given <<def_commit,commit>> are said to be\n"
"\t\"reachable\" from that commit. More\n"
"\tgenerally, one <<def_object,object>> is reachable from\n"
"\tanother if we can reach the one from the other by a <<def_chain,chain>>\n"
"\tthat follows <<def_tag,tags>> to whatever they tag,\n"
"\t<<def_commit_object,commits>> to their parents or trees, and\n"
"\t<<def_tree_object,trees>> to the trees or <<def_blob_object,blobs>>\n"
"\tthat they contain.\n"
msgstr ""
"[[def_reachable]]到達可能(reachable)::\n"
"\tある<<def_commit,コミット>>の祖先全ては、そのコミットから\n"
"\t\"到達可能\" であるといいます。\n"
"\tより一般的に、<<def_tag,タグ>>や<<def_commit_object,コミット>>、\n"
"\t<<def_tree_object,ツリー>>、<<def_blob_object,blobs>>が一方から他方につながっている場合、\n"
"\tその<<def_object,オブジェクト>>がもう一方のオブジェクトから到達可能であるといいます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_rebase]]rebase::\n"
"\tTo reapply a series of changes from a <<def_branch,branch>> to a\n"
"\tdifferent base, and reset the <<def_head,head>> of that branch\n"
"\tto the result.\n"
msgstr ""
"[[def_rebase]]リベース(rebase)::\n"
"\tある<<def_branch,ブランチ>>の一連の変更をことなるベースに適用し、\n"
"\tブランチの<<def_head,ヘッド>>をその結果位置にリセットすること。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_ref]]ref::\n"
"\tA 40-byte hex representation of a <<def_SHA1,SHA1>> or a name that\n"
"\tdenotes a particular <<def_object,object>>. These may be stored in\n"
"\t`$GIT_DIR/refs/`.\n"
msgstr ""
"[[def_ref]]参照(ref)::\n"
"\t<<def_SHA1,SHA1>> の 40バイトの16進数表現、または特定の<<def_object,オブジェクト>>\n"
"\tを表す名前のことです。これらは `$GIT_DIR/refs/` に格納されることがあります。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_reflog]]reflog::\n"
"\tA reflog shows the local \"history\" of a ref.  In other words,\n"
"\tit can tell you what the 3rd last revision in _this_ repository\n"
"\twas, and what was the current state in _this_ repository,\n"
"\tyesterday 9:14pm.  See linkgit:git-reflog[1] for details.\n"
msgstr ""
"[[def_reflog]]参照ログ(reflog)::\n"
"\t参照ログ(reflog) は参照に関するローカルの \"履歴\" です。\n"
"\t言い換えると、このリポジトリの３つ前のリビジョンは何であったかや、\n"
"\t昨日のPM9:14時点ではこのリポジトリはどの状態にあったかなどを\n"
"\t教えてくれるものです。詳細は linkgit:git-reflog[1] を参照してください。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_refspec]]refspec::\n"
"\tA \"refspec\" is used by <<def_fetch,fetch>> and\n"
"\t<<def_push,push>> to describe the mapping between remote\n"
"\t<<def_ref,ref>> and local ref. They are combined with a colon in\n"
"\tthe format <src>:<dst>, preceded by an optional plus sign, +.\n"
"\tFor example: `git fetch $URL\n"
"\trefs/heads/master:refs/heads/origin` means \"grab the master\n"
"\t<<def_branch,branch>> <<def_head,head>> from the $URL and store\n"
"\tit as my origin branch head\". And `git push\n"
"\t$URL refs/heads/master:refs/heads/to-upstream` means \"publish my\n"
"\tmaster branch head as to-upstream branch at $URL\". See also\n"
"\tlinkgit:git-push[1].\n"
msgstr ""
"[[def_refspec]]参照仕様(refspec)::\n"
"\t\"参照仕様(refspec)\" はリモートの<<def_ref,参照>>とローカルの参照とのマッピングをする為に\n"
"\t<<def_fetch,フェッチ(fetch)>> と <<def_push,プッシュ(push)>> によって使用されます。\n"
"\tこれらはコロン(:)で分割した <src>:<dst> の形式で、先頭に + 記号を付けることもあります。\n"
"\t例えば：`git fetch $URL refs/heads/master:refs/heads/origin` は\n"
"\t\"$URL にある master <<def_branch,ブランチ>>の<<def_head,ヘッド>> をつかみ、\n"
"\tそれを自身のリポジトリ内の origin ブランチのヘッドに保管する\" ことを意味します。\n"
"\tまた `git push $URL refs/heads/master:refs/heads/to-upstream` は\n"
"\t\"自身のリポジトリ内の master ブランチのヘッドを $URL の to-upstream ブランチとして\n"
"\t発行する\" ことを意味します。linkgit:git-push[1] も参照してください。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_repository]]repository::\n"
"\tA collection of <<def_ref,refs>> together with an\n"
"\t<<def_object_database,object database>> containing all objects\n"
"\twhich are <<def_reachable,reachable>> from the refs, possibly\n"
"\taccompanied by meta data from one or more <<def_porcelain,porcelains>>. A\n"
"\trepository can share an object database with other repositories\n"
"\tvia <<def_alternate_object_database,alternates mechanism>>.\n"
msgstr ""
"[[def_repository]]リポジトリ(repository)::\n"
"\t<<def_ref,参照(refs)>>と参照から<<def_reachable,到達可能な>>全オブジェクトを\n"
"\t含んだ<<def_object_database,オブジェクトＤＢ>>の集合です。\n"
"\t１つ以上の <<def_porcelain,磁器(porcelains)>> のメタデータを含むこともあります。\n"
"\tリポジトリは<<def_alternate_object_database,代替メカニズム>>により\n"
"\t他のリポジトリとオブジェクトＤＢを共有することもできます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_resolve]]resolve::\n"
"\tThe action of fixing up manually what a failed automatic\n"
"\t<<def_merge,merge>> left behind.\n"
"[[def_resolve]]解決する(resolve)::\n"
"\t自動 <<def_merge,マージ>> に失敗した箇所を手作業で修復する\n"
"\t作業のことです。\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"[[def_revision]]revision::\n"
"\tA particular state of files and directories which was stored in the\n"
"\t<<def_object_database,object database>>. It is referenced by a\n"
"\t<<def_commit_object,commit object>>.\n"
"[[def_revision]]リビジョン(revision)::\n"
"\t<<def_object_database,オブジェクトＤＢ>> 内に格納されたファイルとディレクトリ\n"
"\tの特定の状態。これは <<def_commit_object,コミットオブジェクト>> によって\n"
"\t参照されます。\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"[[def_rewind]]rewind::\n"
"\tTo throw away part of the development, i.e. to assign the\n"
"\t<<def_head,head>> to an earlier <<def_revision,revision>>.\n"
msgstr ""
"[[def_rewind]]巻き戻す(rewind)::\n"
"\t開発の一部を破棄することです。例えば、<<def_head,ヘッド(head)>> を\n"
"\t以前の <<def_revision,リビジョン>> に割り当てることです。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_SCM]]SCM::\n"
"\tSource code management (tool).\n"
msgstr ""
"[[def_SCM]]SCM::\n"
"\tソースコード管理(ツール)。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_SHA1]]SHA1::\n"
"\tSynonym for <<def_object_name,object name>>.\n"
msgstr ""
"[[def_SHA1]]SHA1::\n"
"\t<<def_object_name,オブジェクト名>>と同義。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_shallow_repository]]shallow repository::\n"
"\tA shallow <<def_repository,repository>> has an incomplete\n"
"\thistory some of whose <<def_commit,commits>> have <<def_parent,parents>> cauterized away (in other\n"
"\twords, git is told to pretend that these commits do not have the\n"
"\tparents, even though they are recorded in the <<def_commit_object,commit\n"
"\tobject>>). This is sometimes useful when you are interested only in the\n"
"\trecent history of a project even though the real history recorded in the\n"
"\tupstream is much larger. A shallow repository\n"
"\tis created by giving the `--depth` option to linkgit:git-clone[1], and\n"
"\tits history can be later deepened with linkgit:git-fetch[1].\n"
msgstr ""
"[[def_shallow_repository]]浅いリポジトリ(shallow repository)::\n"
"\t浅い<<def_repository,リポジトリ>>とは一部の<<def_commit,コミット>>の<<def_parent,親>>が\n"
"\tリポジトリ内に存在していない不完全な履歴状態のリポジトリのことを言います。\n"
"\t(<<def_commit_object,コミットオブジェクト>>内に親の情報が記録されていたとしても\n"
"\tgitはこれらのコミットが親を持っていないふりをします)\n"
"\t浅いリポジトリは巨大プロジェクトにて最近の履歴にだけ興味があるような場合に\n"
"\t役に立ちます。linkgit:git-clone[1] に `--depth` オプションを付けることで\n"
"\t作成でき、linkgit:git-fetch[1] により後から履歴をより深くすることもできます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_symref]]symref::\n"
"\tSymbolic reference: instead of containing the <<def_SHA1,SHA1>>\n"
"\tid itself, it is of the format 'ref: refs/some/thing' and when\n"
"\treferenced, it recursively dereferences to this reference.\n"
"\t'<<def_HEAD,HEAD>>' is a prime example of a symref. Symbolic\n"
"\treferences are manipulated with the linkgit:git-symbolic-ref[1]\n"
"\tcommand.\n"
msgstr ""
"[[def_symref]]symref::\n"
"\tシンボル参照：<<def_SHA1,SHA1>> の ID 自身を持つ代わりに、\n"
"\t'ref: refs/some/thing' の形式で参照先を持つ参照です。\n"
"\t参照されると再帰的に逆参照します。\n"
"\t'<<def_HEAD,HEAD>>' は symref の典型例です。\n"
"\tシンボル参照は linkgit:git-symbolic-ref[1] コマンドにより操作します。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_tag]]tag::\n"
"\tA <<def_ref,ref>> pointing to a <<def_tag_object,tag>> or\n"
"\t<<def_commit_object,commit object>>. In contrast to a <<def_head,head>>,\n"
"\ta tag is not changed by a <<def_commit,commit>>. Tags (not\n"
"\t<<def_tag_object,tag objects>>) are stored in `$GIT_DIR/refs/tags/`. A\n"
"\tgit tag has nothing to do with a Lisp tag (which would be\n"
"\tcalled an <<def_object_type,object type>> in git's context). A\n"
"\ttag is most typically used to mark a particular point in the\n"
"\tcommit ancestry <<def_chain,chain>>.\n"
msgstr ""
"[[def_tag]]タグ(tag)::\n"
"\t<<def_tag_object,タグ(tag)>> や <<def_commit_object,コミットオブジェクト>> を\n"
"\t指し示す <<def_ref,参照(ref)>> のことです。<<def_head,ヘッド(head)>> と異なり、\n"
"\tタグは <<def_commit,コミット>> によって変更されることはありません。\n"
"\tタグ(<<def_tag_object,タグオブジェクト>>ではありません)は `$GIT_DIR/refs/tags/` 内に\n"
"\t保管されます。git の タグは List tag とは無関係です (Lisp tagは、\n"
"\tgit の資料内では <<def_object_type,オブジェクトタイプ>> と呼んでいます)。\n"
"\tタグはコミットの祖先の <<def_chain,繋がり(chain)>> 内の特定の位置に印を\n"
"\tつけるために良く使用されます。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_tag_object]]tag object::\n"
"\tAn <<def_object,object>> containing a <<def_ref,ref>> pointing to\n"
"\tanother object, which can contain a message just like a\n"
"\t<<def_commit_object,commit object>>. It can also contain a (PGP)\n"
"\tsignature, in which case it is called a \"signed tag object\".\n"
msgstr ""
"[[def_tag_object]]タグオブジェクト(tag object)::\n"
"\t他のオブジェクトを指し示す <<def_ref,参照(ref)>> を含んでいる\n"
"\t<<def_object,オブジェクト>> のことです。これは、<<def_commit_object,コミットオブジェクト>>\n"
"\tのようにメッセージを含むこともできます。また、署名(PGP) を含む\n"
"\t\"署名付きタグオブジェクト\" と呼ばれるものもあります。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_topic_branch]]topic branch::\n"
"\tA regular git <<def_branch,branch>> that is used by a developer to\n"
"\tidentify a conceptual line of development. Since branches are very easy\n"
"\tand inexpensive, it is often desirable to have several small branches\n"
"\tthat each contain very well defined concepts or small incremental yet\n"
"\trelated changes.\n"
msgstr ""
"[[def_topic_branch]]トピックブランチ (topic branch)::\n"
"\t各開発ラインを識別する為に開発者が使用する通常の git <<def_branch,ブランチ>>。\n"
"\tブランチはとても容易で安価に利用できるため、明確なコンセプトや小さく付加的な\n"
"\t関連する変更を含んだ小さなブランチをいくつか作成することが望ましいです。\n"
"\t(訳注：日本語がおかしいので、訳をみなおす必要がある。以下に原文を載せます。\n"
"\tA regular git <<def_branch,branch>> that is used by a developer to\n"
"\tidentify a conceptual line of development. Since branches are very easy\n"
"\tand inexpensive, it is often desirable to have several small branches\n"
"\tthat each contain very well defined concepts or small incremental yet\n"
"\trelated changes.\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_tracking_branch]]tracking branch::\n"
"\tA regular git <<def_branch,branch>> that is used to follow changes from\n"
"\tanother <<def_repository,repository>>. A tracking\n"
"\tbranch should not contain direct modifications or have local commits\n"
"\tmade to it. A tracking branch can usually be\n"
"\tidentified as the right-hand-side <<def_ref,ref>> in a Pull:\n"
"\t<<def_refspec,refspec>>.\n"
msgstr ""
"[[def_tracking_branch]]追跡ブランチ (tracking branch)::\n"
"\t他の <<def_repository,リポジトリ>> からの変更を追跡する為に使用される\n"
"\t通常の git <<def_branch,ブランチ>>。\n"
"\t追跡ブランチは直接の変更またはローカルのコミットは含むべきではありません。\n"
"\t追跡ブランチは通常、Pull 時に最も役に立つ <<def_ref,参照>> です。：\n"
"\t<<def_refspec,参照仕様>>。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_tree]]tree::\n"
"\tEither a <<def_working_tree,working tree>>, or a <<def_tree_object,tree\n"
"\tobject>> together with the dependent <<def_blob_object,blob>> and tree objects\n"
"\t(i.e. a stored representation of a working tree).\n"
msgstr ""
"[[def_tree]]ツリー (tree)::\n"
"\t依存している <<def_blob_object,blob>> と ツリーオブジェクトも含めた\n"
"\t<<def_working_tree,作業ツリー>> または <<def_tree_object,ツリーオブジェクト>>全体。\n"
"\t(つまり、作業ディレクトリの格納時の表現)。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_tree_object]]tree object::\n"
"\tAn <<def_object,object>> containing a list of file names and modes along\n"
"\twith refs to the associated blob and/or tree objects. A\n"
"\t<<def_tree,tree>> is equivalent to a <<def_directory,directory>>.\n"
msgstr ""
"[[def_tree_object]]ツリーオブジェクト (tree object)::\n"
"\tblob または ツリーオブジェクトへの参照と、ファイル名とモードの一覧を含んだ\n"
"\t<<def_object,オブジェクト>>。<<def_tree,ツリー>> は <<def_directory,ディレクトリ>>\n"
"\tと等価。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_tree-ish]]tree-ish::\n"
"\tA <<def_ref,ref>> pointing to either a <<def_commit_object,commit\n"
"\tobject>>, a <<def_tree_object,tree object>>, or a <<def_tag_object,tag\n"
"\tobject>> pointing to a tag or commit or tree object.\n"
msgstr ""
"[[def_tree-ish]]ツリーっぽい (tree-ish)::\n"
"\t<<def_commit_object,コミットオブジェクト>>、<<def_tree_object,ツリーオブジェクト>>、\n"
"\tあるいは <<def_tag_object,タグオブジェクト>> を指し示している <<def_ref,参照>>。\n"
"\t(訳注：ツリーっぽくない参照は blob オブジェクトへの参照)\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_unmerged_index]]unmerged index::\n"
"\tAn <<def_index,index>> which contains unmerged\n"
"\t<<def_index_entry,index entries>>.\n"
msgstr ""
"[[def_unmerged_index]]マージされていない索引 (unmerged index)::\n"
"\tマージされていない <<def_index_entry,索引エントリ>> を含む\n"
"\t<<def_index,索引(index)>>。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_unreachable_object]]unreachable object::\n"
"\tAn <<def_object,object>> which is not <<def_reachable,reachable>> from a\n"
"\t<<def_branch,branch>>, <<def_tag,tag>>, or any other reference.\n"
msgstr ""
"[[def_unreachable_object]]到達不可能なオブジェクト (unreachable object)::\n"
"\t<<def_branch,ブランチ>> や <<def_tag,タグ>>、その他の参照から\n"
"\t<<def_reachable,到達可能>> ではない <<def_object,オブジェクト>>。\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_upstream_branch]]upstream branch::\n"
"\tThe default <<def_branch,branch>> that is merged into the branch in\n"
"\tquestion (or the branch in question is rebased onto). It is configured\n"
"\tvia branch.<name>.remote and branch.<name>.merge. If the upstream branch\n"
"\tof 'A' is 'origin/B' sometimes we say \"'A' is tracking 'origin/B'\".\n"
msgstr ""
"[[def_upstream_branch]]上流ブランチ(upstream branch)::\n"
"\tマージを行う(もしくはリベースを行う)\n"
"\tディフォルトの<<def_branch,ブランチ>> のこと\n"
"\tbranch.<name>.remote と branch.<name>.merge によって設定される。\n"
"\tもし'A'の上流ブランチが'origin/B'なら\"'A' は 'origin/B' を追跡している\"と言う\n"

#. type: Plain text
#, no-wrap
msgid ""
"[[def_working_tree]]working tree::\n"
"\tThe tree of actual checked out files.  The working tree is\n"
"\tnormally equal to the <<def_HEAD,HEAD>> plus any local changes\n"
"\tthat you have made but not yet committed.\n"
msgstr ""
"[[def_working_tree]]作業ツリー (working tree)::\n"
"\t実際にチェックアウトされたファイルのツリー。通常、作業ツリーは\n"
"\t<<def_HEAD,HEAD>> と まだコミットしていないローカルの変更とを\n"
"\t合わせた内容に等しいです。\n"
